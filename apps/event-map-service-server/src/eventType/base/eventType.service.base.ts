/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EventType as PrismaEventType,
  Event as PrismaEvent,
} from "@prisma/client";

export class EventTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EventTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.eventType.count(args);
  }

  async eventTypes(
    args: Prisma.EventTypeFindManyArgs
  ): Promise<PrismaEventType[]> {
    return this.prisma.eventType.findMany(args);
  }
  async eventType(
    args: Prisma.EventTypeFindUniqueArgs
  ): Promise<PrismaEventType | null> {
    return this.prisma.eventType.findUnique(args);
  }
  async createEventType(
    args: Prisma.EventTypeCreateArgs
  ): Promise<PrismaEventType> {
    return this.prisma.eventType.create(args);
  }
  async updateEventType(
    args: Prisma.EventTypeUpdateArgs
  ): Promise<PrismaEventType> {
    return this.prisma.eventType.update(args);
  }
  async deleteEventType(
    args: Prisma.EventTypeDeleteArgs
  ): Promise<PrismaEventType> {
    return this.prisma.eventType.delete(args);
  }

  async findEvents(
    parentId: string,
    args: Prisma.EventFindManyArgs
  ): Promise<PrismaEvent[]> {
    return this.prisma.eventType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .events(args);
  }
}
